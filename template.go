package main

import (
	"io"
	"strings"
	"text/template"

	"github.com/golang/glog"
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	SERIAL_FILE_TEMPLATE_STR = `
// Code generated by github.com/learnitall/protoc-gen-go-json. DO NOT EDIT.
// source: {{ .TargetFile.Proto.Name }}

package {{ .TargetFile.GoPackageName }}

import (
{{- range $import := .Imports }}
	"{{ $import }}"
{{- end }}
)

{{- range $serialFunc := .SerialFuncs }}
{{ $serialFunc }}
{{- end }}
`
	UNMARSHAL_FUNC_TEMPLATE_STR = `
// UnmarshalJSON implements json.Unmarshaler
func ({{ .MessageName }} *{{ .RenderMessage.GoIdent.GoName }}) UnmarshalJSON(b []byte) error {
	return protojson.UnmarshalOptions{
		DiscardUnknown: {{ .Options.AllowUnknownFields }},
	}.Unmarshal(b, {{ .MessageName }})
}
`
	MARSHAL_FUNC_TEMPLATE_STR = `
// MarshalJSON implements json.Marshaler
func ({{ .MessageName }} *{{ .RenderMessage.GoIdent.GoName }}) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	var err error
{{- range $line := .MarshalLines }}
	{{ $line }}
{{- end }}
	return {{ .BufferName }}.Bytes(), err
}
`
	BUFFER_NAME  = "buf"
	MESSAGE_NAME = "msg"
)

func newTemplate(name string, body string) *template.Template {
	return template.Must(template.New(name).Parse(body))
}

var (
	serialFileTemplate    = newTemplate("serial_file_template", SERIAL_FILE_TEMPLATE_STR)
	unmarshalFuncTemplate = newTemplate("unmarshal_template", UNMARSHAL_FUNC_TEMPLATE_STR)
	marshalFuncTemplate   = newTemplate("marshal_template", MARSHAL_FUNC_TEMPLATE_STR)
)

type RenderOptions struct {
	EnumsAsInts        bool
	EmitDefaults       bool
	OrigName           bool
	AllowUnknownFields bool
}

type TemplateContext struct {
	TargetFile    *protogen.File
	Options       RenderOptions
	Imports       []string
	SerialFuncs   []string
	RenderMessage *protogen.Message
	BufferName    string
	MessageName   string
	MarshalLines  []string
}

func addToSet[T comparable](set *[]T, toAdd T) {
	for _, member := range *set {
		if member == toAdd {
			return
		}
	}
	*set = append(*set, toAdd)
}

func (ctx *TemplateContext) AddImport(i string) {
	addToSet(&ctx.Imports, i)
	glog.V(1).Infof("Updated imports: %s", strings.Join(ctx.Imports, ","))
}

func renderUnmarshalFunc(ctx *TemplateContext) (string, error) {
	glog.V(2).Infof(
		"Rendering unmarshal func for %s from %s",
		ctx.RenderMessage.GoIdent.GoName,
		ctx.RenderMessage.Location.SourceFile,
	)
	glog.V(1).Info("Adding import 'google.golang.org/protobuf/encoding/protojson' for unmarshal function")
	ctx.AddImport("google.golang.org/protobuf/encoding/protojson")
	builder := &strings.Builder{}
	unmarshalFuncTemplate.Execute(builder, ctx)
	return builder.String(), nil
}

func renderMarshalFunc(ctx *TemplateContext) (string, error) {
	glog.V(2).Infof(
		"Rendering marshal func for %s from %s",
		ctx.RenderMessage.GoIdent.GoName,
		ctx.RenderMessage.Location.SourceFile,
	)
	glog.V(1).Info("Adding import 'bytes' for marshal function")
	ctx.AddImport("bytes")
	protoJsonMsg := ConstructMessageTree(ctx, ctx.RenderMessage)
	lines, err := protoJsonMsg.Render(ctx)
	if err != nil {
		return "", err
	}
	ctx.MarshalLines = lines
	builder := &strings.Builder{}
	marshalFuncTemplate.Execute(builder, ctx)
	return builder.String(), nil
}

func RenderJsonSerialFuncs(writer io.Writer, targetFile *protogen.File, options RenderOptions) error {
	templateContext := &TemplateContext{
		TargetFile:  targetFile,
		Options:     options,
		BufferName:  BUFFER_NAME,
		MessageName: MESSAGE_NAME,
	}

	glog.Infof("Beginning to render file: %s", targetFile.Desc.Path())
	for _, m := range targetFile.Messages {
		templateContext.RenderMessage = m
		unmarshalFunc, err := renderUnmarshalFunc(templateContext)
		if err != nil {
			return err
		}
		templateContext.SerialFuncs = append(templateContext.SerialFuncs, unmarshalFunc)

		marshalFunc, err := renderMarshalFunc(templateContext)
		if err != nil {
			return err
		}
		templateContext.SerialFuncs = append(templateContext.SerialFuncs, marshalFunc)
	}

	err := serialFileTemplate.Execute(writer, templateContext)
	if err != nil {
		return err
	}

	return nil
}
